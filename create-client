#!/usr/bin/env bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Derek Moore <derek.moore@gmail.com>
# Christian GÃ¶ttsche <cgzones@googlemail.com>
# Tom Bereknyei <tomberek@gmail.com>

set -eu
set -o pipefail

umask 0077

BIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "${BIN_DIR}/functions"
source "${BIN_DIR}/defaults.conf"

usage() {
    echo "Usage: $0 -c CLIENT_NAME"
    echo "Issues a client certificate for CLIENT_NAME"
    echo
    echo "Options:"
    echo "    -q              no prompt"
    echo "    -c CLIENT_NAME  Client name (commonName) for the new cert"
    echo
}

if [ ! -f ca/ca.crt ]; then
    echo -e "$ERR Must be run inside a CA directory!"
    exit 2
fi

CLIENT_NAME=

while getopts c:hq FLAG; do
    case $FLAG in
        q) export EASY_CA_QUIET="y" ;;
        c) CLIENT_NAME=${OPTARG} ;;
        h) echo -e -n "$SUCC " && usage && exit 0 ;;
        *) echo -e -n "$ERR " && usage && exit 2 ;;
    esac
done

if [ $OPTIND -le $# ]; then
    echo -e -n "$ERR " && usage && exit 2
elif [ "${CLIENT_NAME}" = "" ]; then
    echo -e -n "$ERR " && usage && exit 1
fi

SAFE_NAME=$(echo "${CLIENT_NAME}" | sed 's/\*/star/g' | sed 's/[^A-Za-z0-9-]/-/g')

echo -e "$NOTE Creating new client certificate for '$CLIENT_NAME'" >&2

pushd "${BIN_DIR}/.." > /dev/null

if [ -d "certs/clients/$SAFE_NAME" ]; then
    echo -e "$ERR Configuration already exists for '$CLIENT_NAME' ($SAFE_NAME), exiting." >&2
    exit 1
fi


echo
if [ -n "$CA_ENABLE_ENGINE" ]; then
    echo -e "$NOTE Your CA key is on PKCS11 device, enter PIN." >&2
fi
PASS=`ask -s "$INPUT Enter passphrase for signing CA key: " CA_SIGN_PASS_DEFAULT "${SIGN_PASS:-""}"`
echo >&2
export s_CA_PASS="${PASS}"

openssl_engine_cmd='
    -engine pkcs11 
    -inform engine
    -in pkcs11:object=SIGN%20key'
openssl rsa \
            ${CA_ENABLE_ENGINE:+$openssl_engine_cmd} \
            $( [ -z $CA_ENABLE_ENGINE ] && echo "-check -in ca/private/ca.key") \
            -noout \
            -passin env:s_CA_PASS

trap 'rm -Rf "certs/clients/$SAFE_NAME"' 0
mkdir -p "certs/clients/$SAFE_NAME/ssh"

# Generate the client cert openssl config
export CA_USERNAME="${CLIENT_NAME}"
export CA_CERT_MAIL="${CLIENT_NAME}@${CA_DOMAIN}"
ask_client_cert_questions
export SAN="email:$CA_CERT_MAIL"
template "${BIN_DIR}/templates/clients.tpl" "certs/clients/$SAFE_NAME/$SAFE_NAME.conf"

SURE=`ask "$INPUT Create csr on pkcs11 device? (key must be in \"PIV AUTH key\" or 9a) [y/N]: " CA_USE_PKCS11 "N"`
if [ "${SURE}" != "y" ] && [ "${SURE}" != "Y" ]; then
    ENABLE_ENGINE=
else
    export PIV_PASS=$(ask_pass_once "Enter PIN for PIV key:" "" "${USER_PASS:-""}")
    ENABLE_ENGINE=1
    s_CA_PASS=$PIV_PASS init_slot 9a "certs/clients/$SAFE_NAME/$SAFE_NAME.pub" "pkcs11:object=PIV%20AUTH%20key"
fi

P12_PASSWORD=`ask -s "$INPUT Enter P12 export password (empty to not export): " CA_P12_PASSWORD ""`
echo >&2

echo -e "$NOTE Creating the client key and csr" >&2

# Create the client key and csr
openssl_engine_cmd='
    -engine pkcs11 
    -keyform engine
    -key pkcs11:object=PIV%20AUTH%20key
    -passin env:PIV_PASS'
openssl req -new -batch \
            ${ENABLE_ENGINE:+$openssl_engine_cmd} \
            -config "certs/clients/$SAFE_NAME/$SAFE_NAME.conf" \
            -out "certs/clients/$SAFE_NAME/$SAFE_NAME.csr" \
            $( [ -z $ENABLE_ENGINE ] && echo "
            -nodes
            -keyout certs/clients/$SAFE_NAME/$SAFE_NAME.key")

openssl_engine_cmd='
    -engine pkcs11 
    -inform engine
    -in pkcs11:object=PIV%20AUTH%20key
    -passin env:PIV_PASS'
openssl rsa \
            ${ENABLE_ENGINE:+$openssl_engine_cmd} \
            $( [ -z $ENABLE_ENGINE ] && echo "-check -in certs/clients/$SAFE_NAME/$SAFE_NAME.key") \
            -noout

if [ -z "$ENABLE_ENGINE" ]; then
    chmod 0400 "certs/clients/$SAFE_NAME/$SAFE_NAME.key"
    ln -s ../"$SAFE_NAME".key "certs/clients/$SAFE_NAME/ssh/$SAFE_NAME.ssh"
    openssl rsa -in "certs/clients/$SAFE_NAME/$SAFE_NAME.key" \
        -pubout -out "certs/clients/$SAFE_NAME/$SAFE_NAME.pub"
fi

echo -e "$NOTE Creating client SSH ($SAFE_NAME.ssh.pub)" >&2
echo -e "$NOTE Example sshd_config: TrustedUserCAKeys ca.ssh.pub" >&2
echo -e "$NOTE Example sshd_config: AuthorizedPrincipalsFile /etc/ssh/auth_principals/%u" >&2
echo -e "$NOTE Example known_hosts: @cert-authority *.example.com <ca.ssh.pub>" >&2

ssh-keygen -f "certs/clients/$SAFE_NAME/$SAFE_NAME.pub" -i -mPKCS8 \
        | awk "{printf \$0;print \" ${SAFE_NAME}\"}" > "certs/clients/$SAFE_NAME/ssh/$SAFE_NAME.ssh.pub"
ssh-keygen -lvf "certs/clients/$SAFE_NAME/ssh/$SAFE_NAME.ssh.pub"


echo -e "$NOTE Creating the client certificate" >&2

# Create the client certificate
openssl_engine_cmd="\
    -engine pkcs11 \
    -keyform engine \
    -keyfile pkcs11:object=SIGN%20key"
openssl ca -batch -notext \
           ${CA_ENABLE_ENGINE:+$openssl_engine_cmd} \
           -config ca/ca.conf \
           -in "certs/clients/$SAFE_NAME/$SAFE_NAME.csr" \
           -out "certs/clients/$SAFE_NAME/$SAFE_NAME.crt" \
           -extensions clients_ext \
           -passin env:s_CA_PASS

if [[ -n "$ENABLE_ENGINE" ]]; then
    replace_crt 9a certs/clients/"$SAFE_NAME"/"$SAFE_NAME".crt
fi

echo -e "$NOTE Verifying certificate/key pair" >&2

openssl_engine_cmd="\
    -engine pkcs11 \
    -inform engine \
    -in pkcs11:object=PIV%20AUTH%20key \
    -passin env:PIV_PASS"
key_mod=$(openssl rsa \
    ${ENABLE_ENGINE:+$openssl_engine_cmd} -noout -modulus \
    $( [ -z $ENABLE_ENGINE ] && echo "-in certs/clients/$SAFE_NAME/$SAFE_NAME.key")
)

cert_mod=$(openssl x509 -noout -modulus -in "certs/clients/$SAFE_NAME/$SAFE_NAME.crt")

if [ ! "$key_mod" = "$cert_mod" ];then
    echo -e "$ERR Certificate/Key pair invalid:"
    echo -e "$ERR     <>$cert_mod<>"
    echo -e "$ERR     <>$key_mod<>"
    echo
    exit 2
fi

echo -e "$NOTE Verifying trusted chain" >&2

openssl verify -CAfile ca/chain.pem "certs/clients/$SAFE_NAME/$SAFE_NAME.crt"

echo -e "$NOTE Exporting to a p12 file" >&2

export P12_PASSWORD
openssl pkcs12 -export \
    -password env:P12_PASSWORD \
    -in certs/clients/$SAFE_NAME/$SAFE_NAME.crt \
    -inkey certs/clients/$SAFE_NAME/$SAFE_NAME.key \
    -certfile ca/ca.crt \
    -out certs/clients/$SAFE_NAME/$SAFE_NAME.p12

popd > /dev/null

unset s_CA_PASS

trap 0

echo -e "$SUCC Client certificate for '${CLIENT_NAME}' created."
